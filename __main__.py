import argparse
from ast import arg
import glob
import logging
import os
from PIL import Image
from tqdm import tqdm
from os import path

def parse_arguments() -> dict:
    """Parses user inputted arguments

    Raises:
        FileNotFoundError: required position argument "file" is not an existing directory

    Returns:
        dict: returns a dict consisting of the input folder, output file, excluded filenames and verbosity.
    """
    parser = argparse.ArgumentParser(prog="toproxypdf", epilog="If you think a bug has occured, please open an issue at https://github.com/feimaomiao/toproxypdf/issues")
    parser.add_argument("folder", help="folder path where all your images are stored")
    parser.add_argument("-o", "--output", help="output pdf file name", dest="output")
    parser.add_argument("-e", "--exclude", help="File names that should be excluded (in short os form)", action = "extend", dest="excluded", nargs="+")
    # verbose and quiet cannot coexist
    pgroup = parser.add_mutually_exclusive_group()
    pgroup.add_argument("-v", "--verbose", help="increaes output verbosity", action="store_true")
    pgroup.add_argument("-q", "--quiet", help="reduces output verbosity", action="store_true")
    args = parser.parse_args()
    # select output file
    o = f"{args.folder}.pdf"
    if args.output is not None:
        if args.output.endswith(".pdf"):
            o = args.output
        else:
            o = args.output + ".pdf"
    a = {
        # input folder
        "folder"    : args.folder,
        # output file 
        "output"    : o,
        # list of excluded file names
        "excluded"  : args.excluded,
        # verbosity
        "verb"      : 0 if args.quiet else 2 if args.verbose else 1
    }
    verbosity = {
        0: logging.CRITICAL,
        1: logging.INFO,
        2: logging.DEBUG
    }
    logging.basicConfig(level=verbosity[a['verb']])
    if not path.isdir(a["folder"]):
        raise FileNotFoundError(f"\'{a['folder']}\' is not a folder.")
    return a

def list_files(arguments: dict) -> list:
    """Lists all files within the specified folder

    Args:
        arguments (dict): argument dict generated by parse_argument()

    Returns:
        list: list of Image objects that will be added to the printing image.
    """
    allfiles = []
    logging.info(f"Reading and resizing images for inputted folder {arguments['folder']}")
    it = sorted(os.listdir(arguments['folder']))
    if arguments['verb'] > 0:
        it = tqdm(it)
    for files in it:
        fn = path.join(arguments['folder'], files)

        # Check whether path is excluded
        if any(files.lower().startswith(i) for i in arguments['excluded']):
            logging.info(f"{fn} is in the excluded list, skipping file.")
            continue

        # Check whether specified path is a file
        if not os.path.isfile(fn):
            logging.info(f"{fn} is not a file, will be skipped")
            continue

        # Check whether file is a valid image
        logging.debug(f"Verifying image {fn}")
        img= Image.open(fn)
        try:
            img.verify()
            img = Image.open(fn)
            # resizing images into 1000dpi 
            allfiles.append(img.resize((2500,3500)))
        except:
            logging.info(f"{fn} is not a valid image, will be skipped")

    logging.info(f"Loaded all images, {len(allfiles)} photos are loaded")
    return allfiles

def generate_images(fileslist: list,arguments: dict) -> list:
    # round up amount of pages needed, create however many white backgrounds
    backgrounds = [Image.new("RGB", (8270,11690), color="white") for i in range(-(-len(fileslist) // 9 ))]
    logging.debug("Created background images")
    # balanced x/y coordinates
    xcords = [385, 2885, 5385]
    ycords = [595, 4095, 7595]

    # pastes each file onto backgrounds
    logging.info("Pasting images on backgrounds")
    it = range(len(fileslist))
    if arguments['verb'] > 0:
        it = tqdm(it)
    for i in it:
        x = xcords[i % 3]
        y = ycords[(i % 9) // 3]
        backgrounds[i//9].paste(fileslist[i], (x, y))
        logging.debug(f"Pasted {fileslist[i]} onto background {i // 9}")
    logging.info("Finished pasting images")
    return backgrounds


if __name__ == "__main__":
    arguments = parse_arguments()
    files_to_load = list_files(arguments)
    generated_images = generate_images(files_to_load, arguments)
    logging.info("Converting into pdf")
    generated_images[0].save(arguments['output'], resolution=100.0, save_all=True, append_images=generated_images[1:])